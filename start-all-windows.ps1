# Script PowerShell para iniciar o ambiente completo do EmailMaxV2

Write-Host "`n===============================================" -ForegroundColor Cyan
Write-Host "       EmailMax - Iniciador Unificado" -ForegroundColor Cyan
Write-Host "   Next.js + Microservi√ßo de Valida√ß√£o" -ForegroundColor Cyan
Write-Host "===============================================`n" -ForegroundColor Cyan

# Fun√ß√£o para verificar se uma porta est√° em uso
function Test-PortInUse {
    param(
        [int]$Port
    )
    
    try {
        $connections = Get-NetTCPConnection -LocalPort $Port -ErrorAction SilentlyContinue
        return ($null -ne $connections)
    }
    catch {
        return $false
    }
}

# Verificar se as portas necess√°rias est√£o dispon√≠veis
$nextPort = 3000
$validatorPort = 5000

if (Test-PortInUse -Port $nextPort) {
    Write-Host "‚ùå A porta $nextPort j√° est√° em uso. O servidor Next.js n√£o poder√° iniciar." -ForegroundColor Red
    Write-Host "Encerre o processo que est√° usando esta porta e tente novamente." -ForegroundColor Yellow
    exit 1
}

if (Test-PortInUse -Port $validatorPort) {
    Write-Host "‚ùå A porta $validatorPort j√° est√° em uso." -ForegroundColor Red
    Write-Host "Ser√° necess√°rio liberar esta porta ou usar o modo mock." -ForegroundColor Yellow
    
    $useMock = Read-Host -Prompt "Deseja continuar com o modo de simula√ß√£o (mock)? (S/N)"
    if ($useMock -ne "S" -and $useMock -ne "s") {
        Write-Host "Opera√ß√£o cancelada pelo usu√°rio." -ForegroundColor Yellow
        exit 1
    }
    $mockMode = $true
} else {
    $mockMode = $false
}

# Iniciar o microservi√ßo (real ou mock)
if ($mockMode) {
    Write-Host "`nüîÑ Iniciando o microservi√ßo em modo de simula√ß√£o (mock)..." -ForegroundColor Yellow
    Start-Process -FilePath "node" -ArgumentList "start-mock-service.js" -NoNewWindow
    
    # Pequena pausa para permitir que o servi√ßo mock inicie
    Start-Sleep -Seconds 2
    
    Write-Host "‚úÖ Servi√ßo mock iniciado na porta $validatorPort" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è MODO DE SIMULA√á√ÉO: As valida√ß√µes de email ser√£o simuladas" -ForegroundColor Yellow
} else {
    Write-Host "`nüîÑ Iniciando o microservi√ßo de valida√ß√£o IMAP/SMTP..." -ForegroundColor Blue
    
    # Diret√≥rio do validador
    $validatorDir = Join-Path $PSScriptRoot "imap-smtp-validator"
    
    # Verificar se o Docker est√° dispon√≠vel
    try {
        $dockerVersion = docker --version
        Write-Host "‚úÖ Docker detectado: $dockerVersion" -ForegroundColor Green
        
        # Verificar Docker Compose
        try {
            $composeVersion = docker compose version
            $composeCommand = "docker compose"
        } catch {
            try {
                $legacyVersion = docker-compose --version
                $composeCommand = "docker-compose"
            } catch {
                Write-Host "‚ùå Docker Compose n√£o encontrado!" -ForegroundColor Red
                Write-Host "Usando modo de simula√ß√£o como fallback..." -ForegroundColor Yellow
                $mockMode = $true
                goto MockFallback
            }
        }
        
        # Salvar localiza√ß√£o atual
        $currentDir = Get-Location
        
        # Iniciar o cont√™iner Docker
        Set-Location -Path $validatorDir
        Invoke-Expression "$composeCommand down"
        Invoke-Expression "$composeCommand up -d"
        $exitCode = $LASTEXITCODE
        Set-Location -Path $currentDir
        
        if ($exitCode -ne 0) {
            Write-Host "‚ùå Falha ao iniciar o microservi√ßo via Docker (c√≥digo $exitCode)" -ForegroundColor Red
            Write-Host "Usando modo de simula√ß√£o como fallback..." -ForegroundColor Yellow
            $mockMode = $true
            goto MockFallback
        }
        
        Write-Host "‚úÖ Microservi√ßo iniciado com sucesso via Docker na porta $validatorPort" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Docker n√£o encontrado!" -ForegroundColor Red
        Write-Host "Usando modo de simula√ß√£o como fallback..." -ForegroundColor Yellow
        $mockMode = $true
        goto MockFallback
    }
}

# Label para o fallback de mock se necess√°rio
:MockFallback
if ($mockMode) {
    Start-Process -FilePath "node" -ArgumentList "start-mock-service.js" -NoNewWindow
    Start-Sleep -Seconds 2
    Write-Host "‚úÖ Servi√ßo mock iniciado na porta $validatorPort" -ForegroundColor Green
    Write-Host "‚ö†Ô∏è MODO DE SIMULA√á√ÉO: As valida√ß√µes de email ser√£o simuladas" -ForegroundColor Yellow
}

# Iniciar o servidor Next.js
Write-Host "`nüîÑ Iniciando o servidor Next.js..." -ForegroundColor Blue
Write-Host "Servidor ser√° disponibilizado em: http://localhost:$nextPort`n" -ForegroundColor Green

# Iniciar Next.js em um novo processo
Start-Process -FilePath "npx" -ArgumentList "next dev" -NoNewWindow

Write-Host "`n===============================================" -ForegroundColor Cyan
Write-Host "‚úÖ Ambiente de desenvolvimento iniciado!" -ForegroundColor Green
Write-Host "`nServi√ßos dispon√≠veis:" -ForegroundColor Cyan
Write-Host "- Next.js: http://localhost:$nextPort" -ForegroundColor Green
Write-Host "- Microservi√ßo de valida√ß√£o: http://localhost:$validatorPort" -ForegroundColor Green
if ($mockMode) {
    Write-Host "  (em modo de simula√ß√£o)" -ForegroundColor Yellow
}
Write-Host "`nPressione Ctrl+C para encerrar os servi√ßos" -ForegroundColor Yellow
Write-Host "===============================================`n" -ForegroundColor Cyan

# Manter o script em execu√ß√£o at√© que o usu√°rio pressione Ctrl+C
try {
    while ($true) {
        Start-Sleep -Seconds 1
    }
} finally {
    # Limpar ao sair
    Write-Host "`nüîÑ Encerrando servi√ßos..." -ForegroundColor Yellow
    
    # Encerrar o cont√™iner Docker se estiver usando
    if (-not $mockMode) {
        $validatorDir = Join-Path $PSScriptRoot "imap-smtp-validator"
        $currentDir = Get-Location
        Set-Location -Path $validatorDir
        Invoke-Expression "$composeCommand down"
        Set-Location -Path $currentDir
    }
    
    # Processo de limpeza adicional se necess√°rio
    Write-Host "‚úÖ Servi√ßos encerrados. At√© logo!" -ForegroundColor Green
}